<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Ruby Quiz</title>
    <link>http://www.rubyquiz.com/</link>
    <description>The source for weekly Ruby programming challenges.</description>
    <item>
      <title>Internal Rate of Return (#156)</title>
      <link>http://www.rubyquiz.com/quiz156.html</link>
      <description>&lt;p&gt;by Harrison Reiser&lt;/p&gt;
			&lt;p&gt;Internal Rate of Return (IRR – http://en.wikipedia.org/wiki/Internal_rate_of_return) is a common financial metric, used by investment firms to predict the profitability of a company or project. Finding the IRR of a company amounts to solving for it in the equation for Net Present Value (NPV – http://en.wikipedia.org/wiki/Net_present_value), another valuable decision-making metric:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;       N      C_t&lt;br /&gt;NPV =  Σ  ------------&lt;br /&gt;      t=0 (1 + IRR)**t&lt;/p&gt;
			&lt;p&gt;This week's quiz is to calculate the IRR for any given variable-length list of numbers, which represent yearly cash flows, the C_t's in the formula above: C_0, C_1, etc. (C_0 is typically a negative value, corresponding to the initial investment into the project.) From the example in the Wikipedia article (http://en.wikipedia.org/wiki/Internal_rate_of_return), for instance, you should be able to produce a rate of 17.09% (to four decimal places, let's say) from this or a similar command:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    irr([-100,+30,+35,+40,+45])&lt;br /&gt;    =&amp;gt; 0.1709...&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;p&gt;Keep in mind that an IRR greater than 100% is possible. Extra credit if you can also correctly handle input that produces negative rates, disregarding the fact that they make no sense.&lt;/p&gt;</description>
      <pubDate>Fri, 08 Feb 2008 08:01:18 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz156.html</guid>
    </item>
    <item>
      <title>Parsing JSON (#155)</title>
      <link>http://www.rubyquiz.com/quiz155.html</link>
      <description>&lt;p&gt;There has been a lot of talk recently about parsing with Ruby.  We're seeing some parser generator libraries pop up that make the task that much easier and they've been stirring up interest.&lt;/p&gt;
			&lt;p&gt;In honor of that, this week's Ruby Quiz is to write a parser for JSON.&lt;/p&gt;
			&lt;p&gt;JSON turns out to turns out to be a great little example for writing parsers for two reasons.  First, it's pretty easy stuff.  You can hand-roll a JSON parser in under 100 lines of Ruby.  The second advantage is that the data format is wonderfully documented:&lt;/p&gt;
			&lt;p&gt;&lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt;&lt;/p&gt;
			&lt;p&gt;Since JSON is just a data format and Ruby supports all of the data types, I vote we just use Ruby itself as the abstract syntax tree produced by the parse.&lt;/p&gt;
			&lt;p&gt;Feel free to show off your favorite parser generator, if you don't want to roll your own.  Anything goes.&lt;/p&gt;
			&lt;p&gt;Here are a few tests to get you started:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    require &lt;span class=&quot;string&quot;&gt;&quot;test/unit&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; TestJSONParser &amp;lt; Test::Unit::TestCase&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; setup&lt;br /&gt;        &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt; = JSONParser.new&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_keyword_parsing&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,  &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;,   &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;null&quot;&lt;/span&gt;))&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_number_parsing&lt;br /&gt;        assert_equal(42,      &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;42&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(-13,     &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;-13&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(3.1415,  &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;3.1415&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(-0.01,   &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;-0.01&quot;&lt;/span&gt;))&lt;br /&gt;&lt;br /&gt;        assert_equal(0.2e1,   &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;0.2e1&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(0.2e+1,  &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;0.2e+1&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(0.2e-1,  &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;0.2e-1&quot;&lt;/span&gt;))&lt;br /&gt;        assert_equal(0.2E1,   &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;0.2e1&quot;&lt;/span&gt;))&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_string_parsing&lt;br /&gt;        assert_equal(String.new,          &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{&quot;&quot;}&lt;/span&gt;))&lt;br /&gt;        assert_equal(&lt;span class=&quot;string&quot;&gt;&quot;JSON&quot;&lt;/span&gt;,              &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{&quot;JSON&quot;}&lt;/span&gt;))&lt;br /&gt;&lt;br /&gt;        assert_equal( &lt;span class=&quot;string&quot;&gt;%Q{nested &quot;quotes&quot;}&lt;/span&gt;,&lt;br /&gt;                      &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;'&quot;nested \&quot;quotes\&quot;&quot;'&lt;/span&gt;) )&lt;br /&gt;        assert_equal(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;,                &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{&quot;\\n&quot;}&lt;/span&gt;))&lt;br /&gt;        assert_equal( &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;,&lt;br /&gt;                      &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{&quot;\\u#{&quot;%04X&quot; % ?a}&quot;}&lt;/span&gt;) )&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_array_parsing&lt;br /&gt;        assert_equal(Array.new, &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{[]}&lt;/span&gt;))&lt;br /&gt;        assert_equal( [&lt;span class=&quot;string&quot;&gt;&quot;JSON&quot;&lt;/span&gt;, 3.1415, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;],&lt;br /&gt;                      &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{[&quot;JSON&quot;, 3.1415, true]}&lt;/span&gt;) )&lt;br /&gt;        assert_equal([1, [2, [3]]], &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{[1, [2, [3]]]}&lt;/span&gt;))&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_object_parsing&lt;br /&gt;        assert_equal(Hash.new, &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{{}}&lt;/span&gt;))&lt;br /&gt;        assert_equal( {&lt;span class=&quot;string&quot;&gt;&quot;JSON&quot;&lt;/span&gt; =&amp;gt; 3.1415, &lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;},&lt;br /&gt;                      &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{{&quot;JSON&quot;: 3.1415, &quot;data&quot;: true}}&lt;/span&gt;) )&lt;br /&gt;        assert_equal( { &lt;span class=&quot;string&quot;&gt;&quot;Array&quot;&lt;/span&gt;  =&amp;gt; [1, 2, 3],&lt;br /&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;Object&quot;&lt;/span&gt; =&amp;gt; {&lt;span class=&quot;string&quot;&gt;&quot;nested&quot;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;objects&quot;&lt;/span&gt;} },&lt;br /&gt;                      &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&amp;lt;&amp;lt;-END_OBJECT) )&lt;br /&gt;        {&quot;Array&quot;: [1, 2, 3], &quot;Object&quot;: {&quot;nested&quot;: &quot;objects&quot;}}&lt;br /&gt;        END_OBJECT&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_parse_errors&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;{&quot;&lt;/span&gt;) }&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%q{{&quot;key&quot;: true false}}&lt;/span&gt;) }&lt;br /&gt;&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;[&quot;&lt;/span&gt;) }&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;[1,,2]&quot;&lt;/span&gt;) }&lt;br /&gt;&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{&quot;}&lt;/span&gt;) }&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;%Q{&quot;\\i&quot;}&lt;/span&gt;) }&lt;br /&gt;&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;$1,000&quot;&lt;/span&gt;) }&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;1_000&quot;&lt;/span&gt;) }&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;1K&quot;&lt;/span&gt;) }&lt;br /&gt;&lt;br /&gt;        assert_raise(RuntimeError) { &lt;span class=&quot;variable&quot;&gt;@parser&lt;/span&gt;.parse(&lt;span class=&quot;string&quot;&gt;&quot;unknown&quot;&lt;/span&gt;) }&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <pubDate>Thu, 07 Feb 2008 08:08:52 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz155.html</guid>
    </item>
    <item>
      <title>Making Change (#154)</title>
      <link>http://www.rubyquiz.com/quiz154.html</link>
      <description>&lt;p&gt;In &quot;Practical Ruby Projects,&quot; the author includes a couple of chapters involving coin simulations.  These simulators are used to explore the possibilities of replacing a certain coin or adding a new coin.&lt;/p&gt;
			&lt;p&gt;One interesting subproblem of these simulations is that of making change.  For example, if we need to give 39 cents change in the United States (where there are 25, 10, 5, and 1 cent pieces), we can give:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    &amp;gt;&amp;gt; make_change(39)&lt;br /&gt;    =&amp;gt; [25, 10, 1, 1, 1, 1]&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;p&gt;What if the coins were 10, 7, and 1 cent pieces though and we wanted to make 14 cents change?  We would probably want to do:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    &amp;gt;&amp;gt; make_change(14, [10, 7, 1])&lt;br /&gt;    =&amp;gt; [7, 7]&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;p&gt;This week's Ruby Quiz is to complete a change making function with this skeleton:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; make_change(amount, coins = [25, 10, 5, 1])&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;p&gt;Your function should always return the optimal change with optimal being the least amount of coins involved.  You can assume you have an infinite number of coins to work with.&lt;/p&gt;</description>
      <pubDate>Thu, 31 Jan 2008 08:13:51 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz154.html</guid>
    </item>
    <item>
      <title>Longest Repeated Substring (#153)</title>
      <link>http://www.rubyquiz.com/quiz153.html</link>
      <description>&lt;p&gt;This week's Ruby Quiz is to write a script that finds the longest repeated substring in a given text.&lt;/p&gt;
			&lt;p&gt;Your program will be passed some text on STDIN and is expected to print the longest repeated substring within that text to STDOUT.&lt;/p&gt;
			&lt;p&gt;Repeated substrings may not overlap.  If more than one substring is repeated with the same length, you may print any of them.  If there is no repeated substring, the result is an empty string (print nothing).&lt;/p&gt;
			&lt;p&gt;Example:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ echo banana | ruby longest_repeated_substring.rb&lt;br /&gt;an&lt;br /&gt;&lt;br /&gt;OR&lt;br /&gt;&lt;br /&gt;$ echo banana | ruby longest_repeated_substring.rb&lt;br /&gt;na&lt;/p&gt;
			&lt;p&gt;Make sure your code runs efficiently when passed a large text.&lt;/p&gt;</description>
      <pubDate>Thu, 24 Jan 2008 10:11:45 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz153.html</guid>
    </item>
    <item>
      <title>Counting Cards (#152)</title>
      <link>http://www.rubyquiz.com/quiz152.html</link>
      <description>&lt;p&gt;Learning to count cards is much easier than Hollywood or the casinos would have us believe.  Some systems only require you to track a single running total in your head.&lt;/p&gt;
			&lt;p&gt;One such system, called the Knock-out system of card counting, is extra easy.  You start your count at 4 - (4 x number_of_decks).  That gives us an initial running count of 0, -4, -20, or -28 for the common casino shoe sizes of 1, 2, 6, or 8 decks.  From there, you add one each time you see a 2, 3, 4, 5, 6 or 7 and subtract one when you see a 10, jack, queen, king, or ace.  The 8 and 9 cards do not affect the count.  Once you learn to track the running count, you can make strategy decisions and vary your bets based on the times when the count is in your favor.&lt;/p&gt;
			&lt;p&gt;That's not a lot to remember, but it does take practice to get fast.  You really need to get to where you can count a deck in 20 to 30 seconds if you are going to keep up with those fast moving casinos dealers.&lt;/p&gt;
			&lt;p&gt;This week's Ruby Quiz is to build a training program for helping you learn to count cards.&lt;/p&gt;
			&lt;p&gt;The program needs to show you one or more cards at a time, running through a Blackjack shoe.  As it goes, the program should track the running count.  Have it pause at random intervals, ask you the count, and notify you if you are right or wrong.&lt;/p&gt;
			&lt;p&gt;Both the time to go through the deck and the number of cards displayed at a time should be configurable.  It's important to practice with seeing multiple cards at once because you learn to cancel out pairs of high and low cards.  It might even be nice to provide a mixed mode, which varies the number of cards shown at a time.&lt;/p&gt;
			&lt;p&gt;You can show cards as simple Strings, ASCII art, or full graphics as you prefer.  You may wish to make cards fully disappear after their display time though, to make the conditions more like they would be in a casino.&lt;/p&gt;</description>
      <pubDate>Thu, 17 Jan 2008 16:17:49 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz152.html</guid>
    </item>
    <item>
      <title>Studying Blackjack (#151)</title>
      <link>http://www.rubyquiz.com/quiz151.html</link>
      <description>&lt;p&gt;The majority of the strategy in Blackjack hinges around the dealer's hand.  The reasons are likely obvious to most of you:  that's the hand you have to beat and the dealer plays by fixed rules we can predict.&lt;/p&gt;
			&lt;p&gt;For those unfamiliar with Blackjack, you only need to know a tiny bit about the game for the purposes of this exercise.  The goal for both the player and the dealer is to draw cards to make a hand with the highest total possible, without going over 21.  Going over 21 is called &quot;busting&quot; and it means you lose the hand.  Face cards count for ten, aces are one or eleven (whichever is better for the hand), and all other cards count for their face value.  You start with two cards and, if they happen to be a ten valued card and an ace (a count of 21), the hand is called a &quot;natural.&quot;  A natural is an automatic win in most cases.&lt;/p&gt;
			&lt;p&gt;The dealer begins with one of his two cards face up and one face down.  We call the former the &quot;upcard.&quot;  The dealer will &quot;hit&quot; or take more cards until he reaches a count of 17 or higher.  After that he will &quot;stand&quot; or leave the hand where it is.  That tells us that there are only seven possible outcomes for the dealer:  get dealt a natural, bust, or hit to a total of 17, 18, 19, 20, or 21.&lt;/p&gt;
			&lt;p&gt;We start every hand knowing half of what the dealer holds thanks to the upcard.  Believe it or not, you can make pretty reliable guesses about how the hand will go with just that knowledge.&lt;/p&gt;
			&lt;p&gt;Write a Ruby program that shows the percent chance of a dealer reaching each possible outcome based on the upcard showing.&lt;/p&gt;
			&lt;p&gt;I'll give you some hints to verify your results.  Basic Blackjack strategy teaches that we should assume the dealer &quot;has a ten in the hole&quot; (as the face down card).  It's not always true, of course, but 17 is a common outcome for a dealer with an upcard of seven.  Finally, we call five and six &quot;the dealer's bust cards&quot; for reasons that will become obvious if you are outputting correct percentages.&lt;/p&gt;
			&lt;p&gt;In the casinos Blackjack is often played with more than one deck shuffled together.  One, two, six, and eight deck games are common.  You may want to offer the option to adjust the deck size your program uses.  Either way, let's default to two decks as an average of what a player will face.&lt;/p&gt;</description>
      <pubDate>Fri, 11 Jan 2008 07:54:07 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz151.html</guid>
    </item>
    <item>
      <title>Programmer Ping-Pong (#150)</title>
      <link>http://www.rubyquiz.com/quiz150.html</link>
      <description>&lt;p&gt;This is a non-traditional Ruby Quiz that changes the rules of the contest.  Please read the entire message before playing along.  We will be back to normal quizzes next time, for those that end up missing them.&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;The Game&lt;/p&gt;
			&lt;p&gt;Eric Hodel described Programmer Ping-Pong in his RubyConf 2007 presentation.  I wasn't familiar with the concept before that and it sounds like fun, so let's all try it out together.&lt;/p&gt;
			&lt;p&gt;The rules are:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;* This quiz does not have a no-spoiler period so you may&lt;br /&gt;  submit at anytime after reading this message&lt;br /&gt;* I'll make the initial serve, starting the quiz off with&lt;br /&gt;  a single failing test&lt;br /&gt;* Anyone can return the ball at anytime by doing exactly&lt;br /&gt;  two things, in order:  make all tests pass including the&lt;br /&gt;  recently added failure and then add a new failing test&lt;br /&gt;  of your own&lt;/p&gt;
			&lt;p&gt;I want to see if we can build an entire library using just that process.&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;The Task&lt;/p&gt;
			&lt;p&gt;Let's build a pure Ruby binary AVL tree.  An AVL tree is a self-balancing binary tree data structure where insertion, deletion, and lookup all take O(log n) time to execute.  This is handy to have for many search problems that must run quickly.  It can also be used to build constructs like an OrderedHash.&lt;/p&gt;
			&lt;p&gt;You can read more about AVL trees on Wikipedia:&lt;/p&gt;
			&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Avl_tree&quot;&gt;AVL tree&lt;/a&gt;&lt;/p&gt;
			&lt;p&gt;There's also a handy document describing their rotations in detail:&lt;/p&gt;
			&lt;p&gt;&lt;a href=&quot;http://fortheloot.com/public/AVLTreeTutorial.rtf&quot;&gt;AVL tree Rotations Tutorial&lt;/a&gt;&lt;/p&gt;
			&lt;p&gt;What features our AVL tree will support will be decided by you as you write tests.  Here are some suggestions of things we might try though, just to get you thinking:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;* Support for custom Ruby objects as nodes of the tree&lt;br /&gt;* The ability to customize the comparison code, perhaps with a block&lt;br /&gt;* A String output visualizer, possibly for the inspect() method&lt;br /&gt;* Any other great features you can think of to add&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;The Details&lt;/p&gt;
			&lt;p&gt;We will have two files:  avl_tree.rb and test_avl_tree.rb.  Please pass both files in each submission email you make for this quiz.  Let's not complicate this with directory structures or zip files.&lt;/p&gt;
			&lt;p&gt;Please don't add any external dependencies, unless it's a standard library.  We want everyone to be able to easily run this code and play along.&lt;/p&gt;
			&lt;p&gt;We are using Test::Unit instead of RSpec, or any other tool, for similar reasons.&lt;/p&gt;
			&lt;p&gt;Please keep your tests short.  Under 10 lines is preferred, but don't go over 24.&lt;/p&gt;
			&lt;p&gt;Also try to test just one aspect of the implementation with each test.  I did purposely say &quot;aspect&quot; and not &quot;method.&quot;  I do test more than one method in the serve and I can imagine other scenarios where it could be useful, like checking support for a handful of the standard Enumerator methods.&lt;/p&gt;
			&lt;p&gt;You can refactor any code as needed provided you do not change its function and all tests still pass after you do so.&lt;/p&gt;
			&lt;p&gt;Adds comments if you need to, but writing code that needs no comment would be even better.&lt;/p&gt;
			&lt;p&gt;Let's use some simple spacing conventions to keep all of us on the same page.  Indent two space and do not use tabs.  Break up long lines so they do not exceed 80 characters.&lt;/p&gt;
			&lt;p&gt;Finally, this quiz has the potential to be very chaotic.  Take pity on your quizmaster who must track this process and on the rest of the community who may be bothered by a highly active thread.  I suggest good email manners:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;* Use your client's &quot;Reply&quot; feature and make sure you are replying to&lt;br /&gt;  the message that contains the test you made pass&lt;br /&gt;* Trim any unneeded context from the reply, including the previous&lt;br /&gt;  version of the code since you will be including the current copy&lt;br /&gt;  of the whole thing&lt;br /&gt;* Kindness to your fellow programmers trumps any listed guidelines&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;The Serve&lt;/p&gt;
			&lt;p&gt;The initial contents of avl_tree.rb are:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env ruby -wKU&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; AVLTree&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;
			&lt;p&gt;The test file, test_avl_tree.rb, begins as:&lt;/p&gt;
			&lt;div class=&quot;code&quot;&gt;&lt;span class=&quot;type&quot;&gt;ruby&lt;/span&gt;&lt;div class=&quot;body&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env ruby -wKU&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    require &lt;span class=&quot;string&quot;&gt;&quot;test/unit&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    require &lt;span class=&quot;string&quot;&gt;&quot;avl_tree&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; TestAVLTree &amp;lt; Test::Unit::TestCase&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; setup&lt;br /&gt;        &lt;span class=&quot;variable&quot;&gt;@tree&lt;/span&gt; = AVLTree.new&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; test_tree_membership&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,  &lt;span class=&quot;variable&quot;&gt;@tree&lt;/span&gt;.empty?)&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;@tree&lt;/span&gt;.include?(3))&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;variable&quot;&gt;@tree&lt;/span&gt; &amp;lt;&amp;lt; 3&lt;br /&gt;&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;@tree&lt;/span&gt;.empty?)&lt;br /&gt;        assert_equal(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,  &lt;span class=&quot;variable&quot;&gt;@tree&lt;/span&gt;.include?(3))&lt;br /&gt;      &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
      <pubDate>Thu, 20 Dec 2007 07:36:47 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz150.html</guid>
    </item>
    <item>
      <title>Word Loop (#149)</title>
      <link>http://www.rubyquiz.com/quiz149.html</link>
      <description>&lt;p&gt;Here's a fun little challenge from the Educational Computing Organization of Ontario.&lt;/p&gt;
			&lt;p&gt;Given a single word as input try to find a repeated letter inside of it such that you can loop the text around and reuse that letter.  For example:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby word_loop.rb Mississippi&lt;br /&gt; i&lt;br /&gt; p&lt;br /&gt; p&lt;br /&gt;Mis&lt;br /&gt; ss&lt;br /&gt; si&lt;/p&gt;
			&lt;p&gt;or:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby word_loop.rb Markham&lt;br /&gt;Ma&lt;br /&gt;ar&lt;br /&gt;hk&lt;/p&gt;
			&lt;p&gt;or:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby word_loop.rb yummy&lt;br /&gt;yu&lt;br /&gt;mm&lt;/p&gt;
			&lt;p&gt;If a loop cannot be made, your code can just print an error message:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby word_loop.rb Dana&lt;br /&gt;No loop.&lt;/p&gt;</description>
      <pubDate>Thu, 13 Dec 2007 07:16:13 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz149.html</guid>
    </item>
    <item>
      <title>Postfix to Infix (#148)</title>
      <link>http://www.rubyquiz.com/quiz148.html</link>
      <description>&lt;p&gt;There are many different ways to write mathematical equations.  Infix notation is probably the most popular and yields expressions like:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;2 * (3 + 5)&lt;/p&gt;
			&lt;p&gt;Some people like to work with a postfix notation (often called Reverse Polish Notation or just RPN) though, which doesn't require parentheses for the same equation:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;2 3 5 + *&lt;/p&gt;
			&lt;p&gt;You can compare the results of these equations using the Unix utilities bc (infix) and dc (postfix):&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ bc &amp;lt;&amp;lt;&amp;lt; '2 * (3 + 5)'&lt;br /&gt;16&lt;br /&gt;$ dc &amp;lt;&amp;lt;&amp;lt; '2 3 5 + * p'&lt;br /&gt;16&lt;/p&gt;
			&lt;p&gt;The &quot;p&quot; instruction tacked onto the end of the expression for dc just tells it to print the result.&lt;/p&gt;
			&lt;p&gt;This week's quiz is to write a script that translates postfix expressions into the equivalent infix expression.  In the simplest form, your script should function as such:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby postfix_to_infix.rb '2 3 +'&lt;br /&gt;2 + 3&lt;/p&gt;
			&lt;p&gt;At minimum, try to support the four basic math operators:  +, -, *, and /.  Feel free to add others though.  For numbers, remember to accept decimal values.&lt;/p&gt;
			&lt;p&gt;You can count on the postfix expressions having spaces between each term, if you like.  While dc is content with 2 3+p, you don't have to support it unless you want to.&lt;/p&gt;
			&lt;p&gt;For an added bonus, try to keep the parentheses added to infix expressions to the minimum of what is needed.  For example, prefer these results:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby postfix_to_infix.rb '56 34 213.7 + * 678 -'&lt;br /&gt;56 * (34 + 213.7) - 678&lt;br /&gt;$ ruby postfix_to_infix.rb '1 56 35 + 16 9 - / +'&lt;br /&gt;1 + (56 + 35) / (16 - 9)&lt;/p&gt;
			&lt;p&gt;to these:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;$ ruby postfix_to_infix.rb '56 34 213.7 + * 678 -'&lt;br /&gt;((56 * (34 + 213.7)) - 678)&lt;br /&gt;$ ruby postfix_to_infix.rb '1 56 35 + 16 9 - / +'&lt;br /&gt;(1 + ((56 + 35) / (16 - 9)))&lt;/p&gt;
			&lt;p&gt;Posting equations and your output is not a spoiler.&lt;/p&gt;</description>
      <pubDate>Sat, 08 Dec 2007 13:34:41 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz148.html</guid>
    </item>
    <item>
      <title>Goedel (#147)</title>
      <link>http://www.rubyquiz.com/quiz147.html</link>
      <description>&lt;p&gt;by Hugh Sasse&lt;/p&gt;
			&lt;p&gt;In the book &quot;Starburst&quot; by Frederik Pohl ISBN 0-345-27537-3, page 56, without really spoiling the plot, some characters complain about the verbosity of communications and encode a message by Gödelizing it (detailed on page 58).&lt;/p&gt;
			&lt;p&gt;The encoding works by taking each successive character of a message and raising each successive prime to some function of that character, and multiplying these powers of primes together. So for example we could use the ASCII code + 1 to allow for nulls to be encoded. Then &quot;Ruby\n&quot; would end up as:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;(2 ** R) * (3 ** u) * (5 ** b)....&lt;br /&gt;&lt;br /&gt;10992805522291106558517740012022207329045811217010725353610920778&lt;br /&gt;28664749233402453985379760678149866991742205982820039955872246774&lt;br /&gt;86029159248495553882158351479922840433375701904296875000000000000&lt;br /&gt;00000000000000000000000000000000000000000000000000000000000000000&lt;br /&gt;000000&lt;/p&gt;
			&lt;p&gt;The idea is partly to obscure the message by the amount of factorization needed. This quiz is to write a program to Gödelize a message, and a program to deGödelize it.&lt;/p&gt;
			&lt;p&gt;The funtion used to map characters described in the book is &quot;A&quot; =&amp;gt; 1, &quot;B&quot; =&amp;gt; 2, etc and an example is given where spaces are 0. Nothing further is said about punctuation, or lower case. The message sent in the book is:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;msg = (3.875 * (12 ** 26)) +&lt;br /&gt;     (1973 ** 854) + (331 ** 852) +&lt;br /&gt;     (17 ** 2008) + (3 ** 9707) + (2 ** 88) - 78&lt;/p&gt;
			&lt;p&gt;which it turns out has lots of 0 powers in it, so I strictly don't need the ASCII + 1 I've used in my example, I could use just ASCII, and the nulls would not increase the size of the resulting number. This further means that if a list of characters is sent in decreasing frequency order with the message, the most frequent could be encoded as 0 and the number would be that much smaller. In English it is likely to be an &quot;e&quot; or &quot; &quot; which ends up coded as 0.&lt;/p&gt;
			&lt;p&gt;Interesting things arising from this:&lt;/p&gt;
			&lt;p class=&quot;example&quot;&gt;1 Finding the power once a prime is selected&lt;br /&gt;2 Getting the list of primes in the first place&lt;br /&gt;3 encoding of characters, as mentioned above&lt;br /&gt;4 representing the number that results from encoding.&lt;/p&gt;</description>
      <pubDate>Sat, 08 Dec 2007 13:34:41 -0600</pubDate>
      <guid>http://www.rubyquiz.com/quiz147.html</guid>
    </item>
  </channel>
</rss>